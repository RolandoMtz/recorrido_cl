 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/engineer_availabilities", type: :request do
  
  # EngineerAvailability. As you add validations to EngineerAvailability, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {nombre: "Rolando Martinez", disponibilidad: 10, color: "000FFF"}
  }

  let(:invalid_attributes) {
    {nombre: nil, disponibilidad: 10, color: "000FFF"}
  }

  describe "GET /index" do
    it "renders a successful response" do
      EngineerAvailability.create! valid_attributes
      get engineer_availabilities_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      engineer_availability = EngineerAvailability.create! valid_attributes
      get engineer_availability_url(engineer_availability)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_engineer_availability_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      engineer_availability = EngineerAvailability.create! valid_attributes
      get edit_engineer_availability_url(engineer_availability)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new EngineerAvailability" do
        expect {
          post engineer_availabilities_url, params: { engineer_availability: valid_attributes }
        }.to change(EngineerAvailability, :count).by(1)
      end

      it "redirects to the created engineer_availability" do
        post engineer_availabilities_url, params: { engineer_availability: valid_attributes }
        expect(response).to redirect_to(engineer_availabilities_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new EngineerAvailability" do
        expect {
          post engineer_availabilities_url, params: { engineer_availability: invalid_attributes }
        }.to change(EngineerAvailability, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post engineer_availabilities_url, params: { engineer_availability: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {nombre: "Rolando Martinez", disponibilidad: 11, color: "000FFF"}
      }

      it "updates the requested engineer_availability" do
        engineer_availability = EngineerAvailability.create! valid_attributes
        patch engineer_availability_url(engineer_availability), params: { engineer_availability: new_attributes }
        engineer_availability.reload
        expect(response).to redirect_to(engineer_availabilities_url)
      end

      it "redirects to the engineer_availability" do
        engineer_availability = EngineerAvailability.create! valid_attributes
        patch engineer_availability_url(engineer_availability), params: { engineer_availability: new_attributes }
        engineer_availability.reload
        expect(response).to redirect_to(engineer_availabilities_url)
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        engineer_availability = EngineerAvailability.create! valid_attributes
        patch engineer_availability_url(engineer_availability), params: { engineer_availability: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested engineer_availability" do
      engineer_availability = EngineerAvailability.create! valid_attributes
      expect {
        delete engineer_availability_url(engineer_availability)
      }.to change(EngineerAvailability, :count).by(-1)
    end

    it "redirects to the engineer_availabilities list" do
      engineer_availability = EngineerAvailability.create! valid_attributes
      delete engineer_availability_url(engineer_availability)
      expect(response).to redirect_to(engineer_availabilities_url)
    end
  end
end
